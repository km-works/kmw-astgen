protected boolean readBoolean() throws java.io.IOException {
  char c = readCharWord();
  char t = c;
  while (!java.lang.Character.isWhitespace(t)) t=next();
  if (c=='t') return true;
  if (c=='f') return false;
  throw error();
}

protected char readChar() throws java.io.IOException {
  readExpected("\"");
  java.lang.String word = readTo('"', true);
  java.lang.String result = unescape(word);
  if (result.length() != 1) throw error();
  return result.charAt(0);
}

protected byte readByte() throws java.io.IOException {
  java.lang.String word = readNum();
  try { return java.lang.Byte.parseByte(word); }
  catch (java.lang.NumberFormatException e) { throw error(); }
}

protected short readShort() throws java.io.IOException {
  java.lang.String word = readNum();
  try { return java.lang.Short.parseShort(word); }
  catch (java.lang.NumberFormatException e) { throw error(); }
}

protected int readInt() throws java.io.IOException {
  java.lang.String word = readNum();
  try { return java.lang.Integer.parseInt(word); }
  catch (java.lang.NumberFormatException e) { throw error(); }
}

protected long readLong() throws java.io.IOException {
  java.lang.String word = readNum();
  try { return java.lang.Long.parseLong(word); }
  catch (java.lang.NumberFormatException e) { throw error(); }
}

protected float readFloat() throws java.io.IOException {
  java.lang.String word = readWord();
  try { return java.lang.Float.parseFloat(word); }
  catch (java.lang.NumberFormatException e) { throw error(); }
}

protected double readDouble() throws java.io.IOException {
  java.lang.String word = readWord();
  try { return java.lang.Double.parseDouble(word); }
  catch (java.lang.NumberFormatException e) { throw error(); }
}

protected java.lang.String readString() throws java.io.IOException {
  char delim = readCharWord();
  if (delim == '_') { return null; }
  if (delim != '"') { throw error(); }
  next();
  java.lang.String word = readTo('"', true);
  return unescape(word);
}

protected java.lang.Object wordToUnknownObject(java.lang.String word) throws java.io.IOException {
  if (word.equals("_")) return null;
  java.io.ObjectInputStream objIn = toObjectStream(word);
  try { return objIn.readObject(); } // may throw an IOException
  catch (java.lang.ClassNotFoundException e) {
    throw new java.io.IOException("ClassNotFoundException: " + e.getMessage());
  }
  finally {
    try { objIn.close(); }
    catch (java.io.IOException e) { /* made a best attempt; ignore */ }
  }
}

protected java.lang.Object readUnknownObject() throws java.io.IOException {
  java.lang.String word = readWord();
  readToNewline();
  return wordToUnknownObject(word);
}

/** Read the next word, delimited by whitespace, starting from curr().
    curr() is next whitespace char after word. */
protected java.lang.String readWord() throws java.io.IOException {
  char c = readCharWord();
  java.lang.StringBuilder result = new java.lang.StringBuilder();
  do {
    result.append(c);
    c = next();
  } while (!java.lang.Character.isWhitespace(c));
  return result.toString();
}

/** Read the next number starting with curr(): whitespace, possible
    '-', digit sequence.  curr() is first non-digit char
    thereafter. */
protected java.lang.String readNum() throws java.io.IOException {
  char c = readCharWord();
  java.lang.StringBuilder result = new java.lang.StringBuilder();
  if (c!='-' && !java.lang.Character.isDigit(c))
    throw error();
  do {
    result.append(c);
    c = next();
  } while (java.lang.Character.isDigit(c));
  return result.toString();
}

/** Read the next character, skipping any previous whitespace. */
protected char readCharWord() throws java.io.IOException {
  char c = currentChar;
  while (java.lang.Character.isWhitespace(c)) {
    c = next();
  }
  return c;
}

/** Discard whitespace, then read exactly the string s.  curr() just afterwards. */
protected void readExpected(java.lang.String s) throws java.io.IOException {
  char c = readCharWord();
  for (int i = 0; i < s.length(); i++) {
    if (c != s.charAt(i)) {
      System.out.println("Was expecting '"+s+"', saw '"+c+
                         "' instead of '"+s.charAt(i)+"'");
      throw error();
    }
    c = next();
  }
}

/** Look for and discard field delimiter. */
protected void readFieldDelim(java.lang.String s) throws java.io.IOException {
  readExpected(s);
}

/** Look for next element in list. */
protected boolean readMoreListElements() throws java.io.IOException {
  char c = readCharWord();
  if (c=='}') {
    next();
    return false;
  }
  if (c=='*') {
    next();
    return true;
  }
  throw error();
}

/** Look for header of option type.  Return true if contents must be
    parsed, false if it is Option.none(). */
protected boolean readOptionHeader() throws java.io.IOException {
  char c = readCharWord();
  if (c=='~') {
    next();
    return false;
  }
  if (c=='(') {
    next();
    return true;
  }
  throw error();
}

/**
 * Read up to a delimiter; it is an error if a newline or eof is encountered first.
 * @return The the characters read before the delimiter.
 */
protected java.lang.String readTo(char delim, boolean skipEscape) throws java.io.IOException {
  java.lang.StringBuilder result = new java.lang.StringBuilder();
  boolean escape = false;
  char c = curr();
  while (escape || c != delim) {
    if (c == '\n' || c == '\r') throw error();
    result.append(c);
    if (escape) escape = false;
    else if (skipEscape && c == '\\') escape = true;
    c = next();
  }
  next(); // skip delim
  return result.toString();
}

/**
 * Skip to one of the given delimiters; it is an error if a newline or eof is encountered first.
 * @return The delimiter that was found.
 */
protected char skipTo(char... delims) throws java.io.IOException {
  char c = currentChar;
  while (true) {
    if (c == '\n' || c == '\r') throw error();
    for (char delim : delims) {
      if (c == delim) return delim;
    }
    c = next();
  }
}

protected java.lang.String readToNewline() throws java.io.IOException {
  java.lang.String result = in.readLine();
  if (result == null) throw error();
  readCharWord();
  return result;
}

protected char next() throws java.io.IOException {
  int c = in.read();
  if (c == -1) throw error();
  currentChar = (char)c;
  return currentChar;
}

protected char curr() {
  return currentChar;
}

/** Unescapes a subset of valid Java-style escaped strings.  Unicode escapes are not
  * supported (the JLS doesn't treat them as part of this escaping process, either).
  * Octal escapes are required to use exactly 3 digits.
  */
protected java.lang.String unescape(java.lang.String s) throws java.io.IOException {
  boolean escape = false;
  final java.lang.StringBuilder digits = new java.lang.StringBuilder();
  boolean changed = false;
  final java.lang.StringBuilder result = new java.lang.StringBuilder();
  for (int i = 0; i < s.length(); i++) {
    char c = s.charAt(i);
    if (escape) {
      switch (c) {
        case 'b': result.append('\b'); break;
        case 't': result.append('\t'); break;
        case 'n': result.append('\n'); break;
        case 'f': result.append('\f'); break;
        case 'r': result.append('\r'); break;

        case '"': case '\'': case '\\':
          result.append(c); break;

        case '0': case '1': case '2': case '3':
        case '4': case '5': case '6': case '7':
          digits.append(c);
          if (digits.length() == 3) {
            // this should succeed -- there are guaranteed to be 3 octal digits
            result.append((char) java.lang.Integer.parseInt(digits.toString(), 8));
            digits.setLength(0);
          }
          break;

        default:
          throw error();
      }
      if (digits.length() == 0) escape = false;
    }
    else {
      if (c == '\\') { escape = true; changed = true; }
      else { result.append(c); }
    }
  }
  if (escape) throw error(); // escape was not completed
  return changed ? result.toString() : s;
}

/** Treat a string representation of a hexadecimal number as an ObjectInputStream */
protected java.io.ObjectInputStream toObjectStream(java.lang.String byteString)
    throws java.io.IOException {
  if (byteString.length() % 2 != 0) throw error();
  int length = byteString.length() / 2;
  byte[] bytes = new byte[length];
  for (int i = 0; i < length; i++) {
    java.lang.String b = byteString.substring(i*2, i*2+2);
    try {
      int unsigned = java.lang.Integer.parseInt(b, 16);
      if (unsigned < 128) bytes[i] = (byte) unsigned;
      else bytes[i] = (byte) (unsigned - 256); // maps 255 to -1, 128 to -128
    }
    catch (java.lang.NumberFormatException e) { throw error(); }
  }
  // this may throw an IOException
  return new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(bytes));
}

protected java.io.IOException error() {
  return new java.io.IOException("Serialized data is not properly encoded");
}
